#BlueJ class context
comment0.target=Agent
comment0.text=\ \r\n\ \ \ \ Agent\ class\ is\ a\ subclass\ of\ Person.\ It\ inherits\ variables\ of\ account\ data\ such\ as\ username,\ name,\ password,\ email,\r\n\ \ \ \ phoneNumber,\ account\ type.\ It\ also\ inherits\ methods\ such\ as\ setters,\ getters,\ addProperty()\ and\ deleteProperty().\ \ \r\n\ \ \ \ Agent\ class\ also\ implements\ interface\ which\ is\ PropertyOrganizer.\ It\ implements\ methods\ define\ in\ PropertyOrganizer.\ \r\n
comment1.params=
comment1.target=Agent()
comment10.params=dir\ name
comment10.target=boolean\ accept(java.io.File,\ java.lang.String)
comment11.params=propertyID
comment11.target=void\ deleteComment(int)
comment11.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ A\ method\ for\ deleting\ comment\ txt\ file\ when\ property\ is\ deleted.\ Comment\ file\ located\ inside\ folder\ "comments"\r\n\ \ \ \ is\ deleted\ if\ exist.\r\n
comment12.params=username
comment12.target=java.util.ArrayList\ filterRentalRequest(java.lang.String)
comment12.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ A\ method\ of\ getting\ rental\ requests\ of\ an\ agent.\ \r\n\ \ \ \ Only\ rental\ requests\ of\ a\ given\ agent\ that\ are\ in\ "Requesting"\ status\ is\ retrieved\r\n
comment13.params=rentalRequestID\ propertyID\ username
comment13.target=void\ assignRental(int,\ int,\ java.lang.String)
comment13.text=\ \r\n\ \ \ \ \ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ \ \ \ \ A\ method\ for\ assigning\ property\ rental\ to\ tenant.\ Firstly,\ the\ all\ rentals\ are\ read\ into\ ArrayList\ of\ String[].\r\n\ \ \ \ \ \ \ \ It\ then\ search\ for\ username\ of\ the\ tenant.\ If\ the\ tenant\ has\ existing\ rental\ record,\ a\ new\ propertyID\ is\ added.\ \r\n\ \ \ \ \ \ \ \ Else,\ if\ the\ tenant\ do\ not\ have\ any\ rental\ record\ yet,\ a\ new\ row\ is\ added\ in\ format\:\ \r\n\ \ \ \ \ \ \ \ [username,\ propertyID].\ Rental\ is\ saved.\ After\ that,\ it\ also\ need\ to\ flag\ rental\ status\ to\ "Approved"\ and\r\n\ \ \ \ \ \ \ \ flag\ property\ status\ to\ "Inactive".\r\n
comment14.params=propertyID\ username
comment14.target=void\ removeRentingTenant(int,\ java.lang.String)
comment14.text=\ \r\n\ \ \ \ Author\:\ Pavitra,\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ A\ method\ to\ remove\ a\ propertyID\ from\ the\ tenant's\ rental.\ It\ is\ called\ when\ tenant\ is\ unassigned\ by\r\n\ \ \ \ owner/agent.\ It\ removes\ the\ propertyID\ from\ thw\ specific\ row\ of\ a\ tenant's\ rental.\r\n\ \ \ \ For\ example,\ when\ original\ row\ is\ ["Ali",\ 2,\ 3],\ after\ property\ 3\ is\ removed,\ it\ become\ ["Ali",\ 2]\r\n
comment15.params=index\ arr
comment15.target=java.lang.String[]\ removeFromArray(int,\ java.lang.String[])
comment15.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ A\ method\ used\ by\ removeRentingTenant()\ to\ convert\ Array\ (row\ of\ a\ tenant's\ rental)\ into\ List,\ \r\n\ \ \ \ remove\ a\ propertyID,\ then\ return\ again\ the\ Array\r\n
comment16.params=agent
comment16.target=java.util.ArrayList\ retrieveOwnProperties(java.lang.String)
comment16.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ A\ method\ that\ compare\ agent's\ username\ with\ all\ properties's\ ownedBy\ variables.\r\n\ \ \ \ If\ matched,\ the\ property\ is\ added\ to\ ownedProperties\ ArrayList\ to\ be\ displayed\ in\ View\ (My\ Properties).\r\n
comment17.params=agent
comment17.target=java.util.ArrayList\ retrieveRentals(java.lang.String)
comment17.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ A\ method\ that\ retrieves\ rented\ properties\ of\ an\ agent.\r\n\ \ \ \ It\ compares\ and\ obtain\ only\ properties\ that\ is\ owned\ by\ the\ agent\ and\ in\ status\ "Inactive"\ (assigned\ to\ tenant).\r\n\ \ \ \ They\ are\ stored\ in\ rentedProperties\ ArrayList\r\n
comment18.params=
comment18.target=java.util.ArrayList\ retrieveTenants()
comment18.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ A\ method\ to\ retrieve\ tenants\ who\ are\ renting\ properties\ managed\ by\ an\ agent.\r\n\ \ \ \ It\ first\ compare\ to\ get\ the\ tenant's\ username\ who\ are\ renting,\ by\ checking\ whether\ the\ row\ contains\ \r\n\ \ \ \ rented\ propertyID.\ After\ that,\ if\ the\ tenantUsernames\ ArrayList\ is\ not\ empty,\ it\ compare\ with\ all\ tenants\ \r\n\ \ \ \ using\ username.\ If\ matched,\ the\ Tenant\ object\ is\ retrieved\ and\ added\ to\ rentingTenants\ ArrayList.\r\n
comment19.params=propertyID
comment19.target=void\ setActiveProperty(int)
comment19.text=\ \r\n\ \ \ \ Author\:\ Pavitra\r\n\r\n\ \ \ \ Change\ status\ of\ property\ from\ "Inactive"\ to\ "Active"\ when\ tenant\ is\ removed\ from\ rental.\r\n
comment2.params=username\ name\ pwd\ email\ phoneNumber\ accType\ owner
comment2.target=Agent(java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String)
comment2.text=\ \r\n\ \ \ \ Author\:\ Pavitra\ \r\n\ \ \ \ Contructor\ used\ for\ sending\ registration\ request\ and\ create\ agent\ account\r\n\ \ \ \ Agent\ has\ one\ extra\ data\ compared\ to\ owner,\ which\ is\ the\ owner's\ username\ (who\ hire\ that\ agent)\r\n
comment20.params=propertyID
comment20.target=void\ setInactiveProperty(int)
comment20.text=\ \r\n\ \ \ \ Author\:\ Pavitra\r\n\r\n\ \ \ \ Change\ status\ of\ property\ from\ "Active"\ to\ "Inactive"\ when\ tenant\ rent\ it\r\n
comment21.params=propertyID
comment21.target=void\ activateProperty(int)
comment21.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ Change\ the\ state\ of\ property\ from\ "Deactivated"\ to\ "Activated".\r\n\ \ \ \ Activated\ property\ can\ be\ browsed\ by\ tenants.\r\n
comment22.params=propertyID
comment22.target=void\ deactivateProperty(int)
comment22.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ Change\ the\ state\ of\ property\ from\ "Activated"\ to\ "Deactivate".\r\n\ \ \ \ Deactivated\ property\ cannot\ be\ browsed\ or\ viewed\ by\ tenants.\r\n
comment23.params=rentalRequestID
comment23.target=void\ rentalApproved(int)
comment23.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ Change\ rentalRequestID\ from\ "Requesting"\ to\ "Approved"\ when\ agent\ assign\ tenant\ to\ a\ property\r\n
comment24.params=rentalRequestID
comment24.target=void\ rentalDeclined(int)
comment24.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ Change\ rentalRequestID\ from\ "Requesting"\ to\ "Declined"\ when\ agent\ decline\ the\ rental\ request\r\n
comment25.params=requestID\ status
comment25.target=void\ respondRentalRequest(int,\ java.lang.String)
comment25.text=\r\n\ Author\:\ Lew\ Zi\ Xuan\r\n\ \r\n\ This\ method\ is\ illustrating\ how\ agent\ respond\ to\ rental\ request\ send\ by\ tenant.\r\n\ Create\ a\ rental\ request\ DB\ &\ property\ DB\ instance.\r\n\ Since\ the\ requestID\ is\ created\ from\ 1\ -\ n.\r\n\ So\ we\ just\ use\ requestID\ -\ 1\ to\ get\ the\ particular\ rental\ request\ instance.\r\n\ set\ the\ status\ from\ parameter\ on\ the\ rental\ request.\r\n\ Get\ the\ property\ name\ using\ the\ property\ ID\ from\ the\ rental\ request\ instnace.\r\n\ Save\ the\ latest\ arraylist\ to\ CSV.\r\n\ After\ responding\ the\ request,\ inform\ the\ sender.\r\n
comment26.params=agent
comment26.target=java.util.ArrayList\ retrieveOwnPropertyID(java.lang.String)
comment26.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ Compare\ and\ retrieve\ the\ agent's\ owned\ propertyID.\ When\ the\ property\ is\ owned\ by\ agent,\ it\ is\ added\ to\r\n\ \ \ \ an\ ArrayList\ and\ returned.\r\n
comment27.params=
comment27.target=java.lang.String\ toString()
comment27.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ toString()\ method\ is\ overrided\ to\ arrange\ agent\ account\ data\ into\ a\ comma\ delimited\ string\ to\ save\ in\ csv\r\n
comment3.params=projectType\ propertyType\ propertyName\ address\ size\ rentPrice\ rentRate\ numOfRoom\ numOfBathroom\ ownedBy\ status\ state\ facilities
comment3.target=void\ addProperty(java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ int,\ double,\ double,\ int,\ int,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.util.ArrayList)
comment3.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling,\ Nurshara\ Batrisyia\r\n\r\n\ \ \ \ A\ method\ for\ adding\ a\ property.\ All\ data\ are\ passed\ by\ parameter.\ The\ propertyID\ is\ obtained\ by\ getting\ current\ \r\n\ \ \ \ last\ ID\ in\ the\ file\ and\ add\ by\ 1.\ addFacilities()\ method\ is\ called\ for\ adding\ facilities\ in\ another\ file.\r\n
comment4.params=facilityToAdd
comment4.target=void\ addFacilities(java.util.ArrayList)
comment4.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ A\ method\ for\ adding\ facilities\ of\ a\ property.\ Since\ ArrayList\ of\ facilities\ is\ passed,\ it\ is\ converted\ into\r\n\ \ \ \ array\ to\ match\ the\ write\ file\ method.\r\n
comment5.params=propertyID\ projectType\ propertyType\ propertyName\ address\ size\ rentPrice\ rentRate\ numOfRoom\ numOfBathroom\ facilities
comment5.target=void\ editProperty(int,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ int,\ double,\ double,\ int,\ int,\ java.util.ArrayList)
comment5.text=\ \r\n\ \ \ \ Author\:\ Nurshara\ Batrisyia\r\n\r\n\ \ \ \ A\ method\ for\ editing\ data\ of\ owned\ property.\ Property\ data\ are\ passed\ in\ parameter.\r\n\ \ \ \ The\ targeted\ propertyID\ is\ compared\ with\ all\ properties.\ When\ matched,\ the\ new\ values\ are\ set\ and\ saved.\r\n\ \ \ \ It\ also\ call\ the\ editFacilities().\r\n
comment6.params=propertyID\ facilityToEdit
comment6.target=void\ editFacilities(int,\ java.util.ArrayList)
comment6.text=\ \r\n\ \ \ \ \ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ \ \ \ \ A\ method\ for\ editing\ facilities\ of\ a\ property.\ The\ propertyID\ and\ facilityToEdit\ ArrayList\ are\ passed\ in\ parameter.\r\n\ \ \ \ \ \ \ \ Targeted\ propertyID\ is\ compared\ in\ String\ and\ when\ matched,\ the\ facilities\ array\ (in\ format\:\ facility1,\ facility2,\ ...)\ \r\n\ \ \ \ \ \ \ \ is\ copied\ to\ the\ original\ eachProperty\ array\ (in\ format\:\ propertyID,\ facility1,\ facility2,\ ...)\r\n
comment7.params=propertyID
comment7.target=void\ deleteProperty(int)
comment7.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ A\ method\ for\ deleting\ a\ property.\ It\ compares\ propertyID\ of\ delete\ with\ all\ properties,\ remove\ the\ Property\ object\r\n\ \ \ \ when\ propertyID\ is\ found.\ It\ also\ call\ deleteFacilities(),\ deletePhotos()\ and\ deleteComment()\ as\ to\ \r\n\ \ \ \ completely\ delete\ the\ property\ data.\ \r\n
comment8.params=propertyID
comment8.target=void\ deleteFacilities(int)
comment8.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ A\ method\ for\ deleting\ facilities\ of\ a\ property.\ It\ compares\ propertyID\ in\ String\ because\ Array\ of\ String\ is\ used.\r\n\ \ \ \ When\ the\ targeted\ propertyID\ is\ found\ at\ the\ first\ index,\ the\ array\ of\ String\ is\ removed.\r\n
comment9.params=propertyID
comment9.target=void\ deletePhotos(int)
comment9.text=\ \r\n\ \ \ \ Author\:\ Adeline\ Fong\ Li\ Ling\r\n\r\n\ \ \ \ A\ method\ for\ deleting\ property\ images.\ When\ property\ is\ deleted,\ image\ is\ also\ deleted.\r\n\ \ \ \ FilenameFilter\ is\ used\ to\ search\ images\ of\ targeted\ property,\ which\ starts\ with\ "propertyID_",\ delete\ image\r\n\ \ \ \ by\ getting\ absolute\ path\ of\ propertyImage\ folder.\r\n
numComments=28
